---
# tasks/main.yml

- name: Install build dependencies and runtime packages
  apt:
    name:
      - build-essential
      - cmake
      - libgetdns-dev
      - libyaml-dev
      - libssl-dev
      - libsystemd-dev
      - pkg-config
      - systemd-resolved
      - tcpdump      # nur f체r dns-capture
      - dnsutils     # optional: dig, nslookup
      - git
    state: present
    update_cache: yes

# (Optional) tempor채ren DNS setzen, damit APT/Git etc. funktionieren
- name: Tempor채ren DNS-Server setzen (f체r Internetzugriff)
  lineinfile:
    path: /etc/systemd/resolved.conf
    line: "DNS=9.9.9.9"
    state: present

- name: Restart systemd-resolved now
  systemd:
    name: systemd-resolved
    state: restarted

- name: Clone and build Stubby from source
  block:
    - name: Clone Stubby repository
      git:
        repo: https://github.com/getdnsapi/stubby.git
        dest: /tmp/stubby
        force: yes

    - name: Create build directory
      file:
        path: /tmp/stubby/build
        state: directory

    - name: Configure Stubby build
      command: cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..
      args:
        chdir: /tmp/stubby/build
        creates: /tmp/stubby/build/Makefile

    - name: Build Stubby
      command: make -j{{ ansible_processor_vcpus | default(2) }}
      args:
        chdir: /tmp/stubby/build

    - name: Install Stubby
      command: make install
      args:
        chdir: /tmp/stubby/build
        creates: /usr/local/bin/stubby

- name: Ensure directories exist
  block:
    - name: Ensure Stubby config directory exists
      file:
        path: "/usr/local/etc/stubby"
        state: directory
        mode: '0755'

    - name: Create DNS logging directory
      file:
        path: "/var/log/dns"
        state: directory
        mode: '0755'

- name: Install DNS capture script
  copy:
    dest: "/usr/local/bin/dns-capture"
    mode: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail
      LOGDIR="/var/log/dns"
      mkdir -p "$LOGDIR"

      # Nur DNS-over-TLS Traffic (Port 853)
      exec /usr/bin/tcpdump -i eth0 -w "$LOGDIR/dns_traffic.pcap" -s 0 -U port 853

- name: Configure Stubby for Quad9
  copy:
    dest: "/usr/local/etc/stubby/stubby.yml"
    mode: '0644'
    content: |
      resolution_type: GETDNS_RESOLUTION_STUB
      dns_transport_list:
        - GETDNS_TRANSPORT_TLS
      tls_authentication: GETDNS_AUTHENTICATION_REQUIRED
      round_robin_upstreams: 1
      idle_timeout: 10000
      listen_addresses:
        - 127.0.0.1@53
        - 127.0.0.1@853
      upstream_recursive_servers:
        - address_data: 9.9.9.9
          tls_auth_name: "dns.quad9.net"
          tls_port: 853
        - address_data: 149.112.112.112
          tls_auth_name: "dns.quad9.net"
          tls_port: 853
        - address_data: 2620:fe::fe
          tls_auth_name: "dns.quad9.net"
          tls_port: 853
        - address_data: 2620:fe::9
          tls_auth_name: "dns.quad9.net"
          tls_port: 853
      appdata_dir: "/var/log/dns"
      log_level: 7
  notify: Restart stubby

- name: Create stubby systemd service
  copy:
    dest: /etc/systemd/system/stubby.service
    mode: '0644'
    content: |
      [Unit]
      Description=DNS Privacy Stub Resolver
      Wants=network-online.target
      After=network-online.target
      Before=nss-lookup.target
      Wants=nss-lookup.target

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/stubby -C /usr/local/etc/stubby/stubby.yml
      KillSignal=SIGINT
      Restart=on-failure
      RestartSec=5
      User=stubby
      Group=stubby
      AmbientCapabilities=CAP_NET_BIND_SERVICE
      CapabilityBoundingSet=CAP_NET_BIND_SERVICE
      NoNewPrivileges=true
      MemoryDenyWriteExecute=true
      RestrictRealtime=true
      RestrictSUIDSGID=true
      ProtectControlGroups=true
      ProtectKernelModules=true
      ProtectKernelTunables=true
      ProtectSystem=strict
      ProtectHome=true
      ReadWritePaths=/var/log/dns
      PrivateDevices=true
      PrivateTmp=true

      [Install]
      WantedBy=multi-user.target
  notify: Reload systemd

- name: Create stubby user
  user:
    name: stubby
    system: yes
    shell: /usr/sbin/nologin
    home: /var/lib/stubby
    create_home: no

- name: Create dns-monitor service (only this custom unit is needed)
  copy:
    dest: /etc/systemd/system/dns-monitor.service
    mode: '0644'
    content: |
      [Unit]
      Description=DNS Traffic Monitor
      Wants=stubby.service systemd-resolved.service network-online.target
      After=stubby.service systemd-resolved.service network-online.target
      PartOf=stubby.service

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/dns-capture
      KillSignal=SIGINT
      Restart=on-failure
      RestartSec=5
      # Optional: unter eigenem Benutzer mit CAP_NET_RAW (wenn tcpdump setcap hat)
      # User=_tcpdump
      # AmbientCapabilities=CAP_NET_RAW
      # CapabilityBoundingSet=CAP_NET_RAW

      [Install]
      WantedBy=multi-user.target

  notify: Reload systemd

- name: Configure systemd-resolved to forward to Stubby
  block:
    - name: Ensure resolved drop-in directory exists
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory
        mode: '0755'

    - name: Remove temporary DNS from resolved.conf
      lineinfile:
        path: /etc/systemd/resolved.conf
        line: "DNS=9.9.9.9"
        state: absent

    - name: Set Stubby as DNS resolver
      copy:
        dest: /etc/systemd/resolved.conf.d/stubby.conf
        mode: '0644'
        content: |
          [Resolve]
          DNS=127.0.0.1:853
          DNSStubListener=no
          Cache=yes
          DNSOverTLS=no
      notify: Restart systemd-resolved

- name: Make resolv.conf managed by systemd-resolved
  file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: yes

- name: Reload systemd (for services)
  systemd:
    daemon_reload: yes

- meta: flush_handlers

- name: Enable & start core DNS services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - stubby
    - systemd-resolved

# dns-monitor erst danach
- name: Enable & start dns-monitor
  systemd:
    name: dns-monitor
    enabled: yes
    state: started